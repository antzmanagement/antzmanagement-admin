<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;
use Carbon\Carbon;
use App\Role;
use App\RoomContract;
use Illuminate\Support\Facades\Hash;
use App\Traits\AllServices;

class RoleController extends Controller
{
    use AllServices;

    private $controllerName = '[RoleController]';

    public function index(Request $request)
    {
        error_log($this->controllerName . 'Retrieving list of roles.');
        // api/role (GET)
        $roles = $this->getRoles($request->user());
        if ($this->isEmpty($roles)) {
            return $this->errorPaginateResponse('Roles');
        } else {
            return $this->successPaginateResponse('Roles', $roles, $this->toInt($request->pageSize), $this->toInt($request->pageNumber));
        }
    }

    public function filter(Request $request)
    {
        error_log($this->controllerName . 'Retrieving list of filtered roles.');
        // api/role/filter (GET)
        $params = collect([
            'keyword' => $request->keyword,
            'fromdate' => $request->fromdate,
            'todate' => $request->todate,
            'status' => $request->status,
        ]);
        //Convert To Json Object
        $params = json_decode(json_encode($params));
        $roles = $this->getRoles($request->user());
        $roles = $this->filterRoles($roles, $params);

        if ($this->isEmpty($roles)) {
            return $this->errorPaginateResponse('Roles');
        } else {
            return $this->successPaginateResponse('Roles', $roles, $this->toInt($request->pageSize), $this->toInt($request->pageNumber));
        }
    }

    public function show(Request $request, $uid)
    {
        // api/role/{roleid} (GET)
        error_log($this->controllerName . 'Retrieving role of uid:' . $uid);
        $role = $this->getRole($uid);
        if ($this->isEmpty($role)) {
            $data['data'] = null;
            return $this->notFoundResponse('Role');
        } else {
            return $this->successResponse('Role', $role, 'retrieve');
        }
    }

    public function store(Request $request)
    {
        DB::beginTransaction();
        // Can only be used by Authorized personnel
        // api/role (POST)
        $this->validate($request, [
            'room_contract_id' => 'required|numeric',
        ]);
        error_log($this->controllerName . 'Creating role.');

        $roomContract = $this->getRoomContractById($request->room_contract_id);

        if ($this->isEmpty($roomContract)) {
            DB::rollBack();
            return $this->errorResponse();
        }

        if ($roomContract->left > 0 && !$roomContract->expired ) {

            $room = $roomContract->room;
            if ($this->isEmpty($room)) {
                DB::rollBack();
                return $this->errorResponse();
            }
            $rentalDate = $this->toDate(Carbon::parse($roomContract->startdate)->addMonth($roomContract->latest)->startOfMonth());
            $role = new Role();
            $role->uid = Carbon::now()->timestamp . Role::count();
            $params = collect([
                'price' => $room->price,
                'rentaldate' => $rentalDate,
                'remark' => "This rental is generated by system monthly automatically.",
                'room_contract_id' => $roomContract->id,
            ]);
            //Convert To Json Object
            $params = json_decode(json_encode($params));
            $role = $this->createRole($params);
    
            if ($this->isEmpty($role)) {
                DB::rollBack();
                return $this->errorResponse();
            }
    
            if (!$this->syncWithRole($roomContract)) {
                DB::rollBack();
                return $this->errorResponse();
            }
    
          
        }else{
            DB::rollBack();
            return $this->errorResponse();

        }



        DB::commit();
        return $this->successResponse('Role', $role, 'create');
    }

    public function update(Request $request, $uid)
    {
        DB::beginTransaction();
        // api/role/{roleid} (PUT)
        error_log($this->controllerName . 'Updating role of uid: ' . $uid);
        $role = $this->getRole($uid);
        $this->validate($request, [
            'name' => 'required|string|max:300',
            'address' => 'nullable|string|max:300',
            'postcode' => 'nullable|string|max:300',
            'state' => 'nullable|string|max:300',
            'city' => 'nullable|string|max:300',
            'country' => 'nullable|string|max:300',
            'price' => 'required|numeric',
            'roleTypes' => 'required',
        ]);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->notFoundResponse('Role');
        }
        $params = collect([
            'name' => $request->name,
            'address' => $request->address,
            'postcode' => $request->postcode,
            'state' => $request->state,
            'city' => $request->city,
            'country' => $request->country,
            'price' => $request->price,
        ]);
        //Convert To Json Object
        $params = json_decode(json_encode($params));
        $role = $this->updateRole($role, $params);

        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->errorResponse();
        }

        $roleTypes = RoleType::find($request->roleTypes);
        if ($this->isEmpty($roleTypes)) {
            DB::rollBack();
            return $this->notFoundResponse('RoleType');
        }

        try {
            $role->roleTypes()->sync($roleTypes->pluck('id'));
        } catch (Exception $e) {
            DB::rollBack();
            return $this->errorResponse();
        }
        $role = $this->getRoleById($role->id);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->errorResponse();
        }
        DB::commit();
        return $this->successResponse('Role', $role, 'update');
    }

    public function destroy(Request $request, $uid)
    {
        DB::beginTransaction();
        // TODO ONLY TOGGLES THE status = 1/0
        // api/role/{roleid} (DELETE)
        error_log($this->controllerName . 'Deleting role of uid: ' . $uid);
        $role = $this->getRole($uid);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->notFoundResponse('Role');
        }
        $role = $this->deleteRole($role);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->errorResponse();
        }

        if (!$this->syncWithRole($role->roomcontract)) {
            DB::rollBack();
            return $this->errorResponse();
        }


        DB::commit();
        return $this->successResponse('Role', $role, 'delete');
    }

    public function makePayment(Request $request, $uid)
    {
        DB::beginTransaction();
        $this->validate($request, [
            'penalty' => 'nullable|numeric',
        ]);
        $role = $this->getRole($uid);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->notFoundResponse('Role');
        }

        $params = collect([
            'price' => $request->price,
            'payment' => $request->price,
            'paid' => true,
            'penalty' => $this->toDouble($request->penalty),
            'paymentdate' => Carbon::now()->format('Y-m-d'),
            'rentaldate' => $role->rentaldate,
            'remark' => $role->remark,
            'room_contract_id' => $role->roomcontract->id,
        ]);
        //Convert To Json Object
        $params = json_decode(json_encode($params));
        $role = $this->updateRole($role, $params);

        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->errorResponse();
        }

        $role = $this->getRoleById($role->id);
        if ($this->isEmpty($role)) {
            DB::rollBack();
            return $this->errorResponse();
        }
        
        DB::commit();
        return $this->successResponse('Role', $role, 'update');
    }
}
